if &compatible
  set nocompatible
end

if empty(glob('~/.vim/autoload/plug.vim'))
	silent !curl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs
		\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim &&
		\ mkdir -p ~/.config && ln -s ~/.vim ~/.config/nvim && ln -s ~/.vimrc ~/.config/nvim/init.vim
  autocmd VimEnter * PlugInstall | source $MYVIMRC
endif

let mapleader = ","
let maplocalleader = "-"
let g:python_host_prog = '/usr/bin/python'

call g:plug#begin('~/.vim/plugged')

Plug 'Shougo/deoplete.nvim'
Plug 'SirVer/ultisnips'
Plug 'bling/vim-airline'
Plug 'cespare/vim-toml', {'for' : 'toml'}
Plug 'ctrlpvim/ctrlp.vim'
Plug 'elzr/vim-json', {'for' : 'json'}
Plug 'fatih/vim-go', {'for': 'go'}
Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown'
Plug 'honza/vim-snippets'
Plug 'jmcantrell/vim-virtualenv', {'for': 'python'}
Plug 'klen/python-mode', {'for': 'python'}
Plug 'majutsushi/tagbar'
Plug 'morhetz/gruvbox'
Plug 'rking/ag.vim'
Plug 'scrooloose/nerdcommenter'
"Plug 'scrooloose/syntastic'
Plug 'terryma/vim-multiple-cursors'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'Shougo/echodoc.vim'
Plug 'zchee/deoplete-go'
Plug 'chase/vim-ansible-yaml'

call g:plug#end()

filetype plugin indent on
set background=dark
syntax enable
colorscheme gruvbox

set encoding=utf-8
set fillchars+=stl:\ ,stlnc:\
set termencoding=utf-8
set foldmethod=syntax
set foldlevelstart=99

set modelines=3
set number
set relativenumber
set cursorline
set ts=4
set sw=4
set ignorecase smartcase

set nobackup
set listchars=tab:>-,trail:·,nbsp:%
set showbreak=>
set history=50
set ruler
set incsearch
set wildmenu
set wildmode=longest,list,full
set undofile
set undodir=/tmp
set directory=/tmp
set hidden
set noshowmode

set splitright
set splitbelow

set fileformats=unix,dos,mac    " Prefer Unix over Windows over OS 9 formats

"http://stackoverflow.com/questions/20186975/vim-mac-how-to-copy-to-clipboard-without-pbcopy
set clipboard^=unnamed
set clipboard^=unnamedplus


"""""""""""""""""""""
"  Vim-go settings  "
"""""""""""""""""""""
autocmd BufReadPost *
			\ if line("'\"") > 0 && line("'\"") <= line("$") |
			\   exe "normal g`\"" |
			\ endif
au BufNewFile,BufRead *.conf setf toml

au FileType go nmap gr <Plug>(go-run)
au FileType go nmap gb <Plug>(go-build)
"au FileType go nmap gt <Plug>(go-test)
au FileType go nmap gi <Plug>(go-info)
au FileType go nmap gn <Plug>(go-doc-browser)
au FileType go nmap gh <Plug>(go-doc)
au FileType go nmap gv <Plug>(go-doc-vertical)
au FileType go nmap gdd <Plug>(go-def)
au FileType go nmap gds <Plug>(go-def-split)
au FileType go nmap gdv <Plug>(go-def-vertical)
nmap <Leader>i :GoImports<CR>

if !exists("g:go_golint_bin")
    let g:go_golint_bin = "golint"
endif

let g:go_fmt_command = "goimports"
let g:go_fmt_autosave = 1
let g:go_disable_autoinstall = 1
let g:go_fmt_fail_silently = 0

let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
	\ }

"""""""""""""""""""""""
"  Deoplete settings  "
"""""""""""""""""""""""
set completeopt=menu,noinsert
let g:deoplete#enable_at_startup = 1
let g:deoplete#enable_ignore_case = 0
let g:deoplete#auto_completion_start_length = 3
let g:deoplete#sources#go = 'vim-go'
inoremap <silent><expr> <Tab> pumvisible() ? "\<C-n>" : "<Tab>"
" <CR>: close popup.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return pumvisible() ? deoplete#mappings#close_popup() : "\n"
endfunction

" make braket matching highlight more comfortable
hi MatchParen cterm=bold ctermbg=none ctermfg=magenta


set laststatus=2

nmap <Leader>t :NERDTree<CR>
nmap <Leader>c :close<CR>

"nmap <Leader>w :set wrap!<cr>
nmap <Leader>w :w<cr>

noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

""""""""""""""""""""""""
"  UltiSnips settings  "
""""""""""""""""""""""""
let g:UltiSnipsExpandTrigger="<c-k>"
let g:UltiSnipsListSnippets="<c-l>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"
let g:UltiSnipsEditSplit="vertical"

""""""""""""""""""""""""
"  Syntastic settings  "
""""""""""""""""""""""""
"let g:syntastic_go_checkers = ['golint', 'govet', 'errcheck']
"let g:syntastic_mode_map = { 'mode': 'active', 'passive_filetypes': ['go'] }


"""""""""""""""""""""
"  Pymode settings  "
"""""""""""""""""""""
let g:pymode_folding = 0
let g:pymode_syntax_all = 1

"""""""""""""""""""""
"  Tagbar settings  "
"""""""""""""""""""""
let g:tagbar_compact = 1
nmap <F8> :TagbarToggle<CR>

""""""""""""""""""""""
"  Airline settings  "
""""""""""""""""""""""
let g:airline_theme="gruvbox"
if !exists('g:airline_symbols')
	let g:airline_symbols = {}
endif
let g:airline_symbols.linenr = '␤ '
let g:airline_symbols.paste = 'ρ'
let g:airline_left_sep = '»'
let g:airline_right_sep = '«'
let g:airline#extensions#syntastic#enabled = 0

" Press space to clear search highlighting
nnoremap <silent> <Space> :noh<CR>
nnoremap <NL> i<CR><ESC>

""""""""""""""""""""""
"  EchoDoc settings  "
""""""""""""""""""""""
set noshowcmd
let g:echodoc_enable_at_startup = 1

""""""""""""""""
"  Navigation  "
""""""""""""""""
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l

"""""""""""""""""""""""""""""""""
"  Quickfix and Location lists  "
"""""""""""""""""""""""""""""""""

" Close window
nnoremap <silent> <leader>ll :ccl<CR>:lcl<CR>

" Location fast navigation
nnoremap <silent> <leader>nn :lwindow<CR>:lne<CR>
nnoremap <silent> <leader>pp :lwindow<CR>:lp<CR>

" Quickfix fast navigation
nnoremap <silent> <localleader>nn :cwindow<CR>:cn<CR>
nnoremap <silent> <localleader>pp :cwindow<CR>:cp<CR>

if has('nvim')
	nmap <BS> <C-W>h
endif

"""""""""""""""""""""
"  Pymode settings  "
"""""""""""""""""""""

let g:pymode_rope_goto_definition_bind = 'gd'
let g:pymode_rope_goto_definition_cmd = 'e'
let g:pymode_rope_completion = 0
let g:pymode_rope_organize_imports_bind = 'goi'
