let mapleader=","

call plug#begin('~/.vim/plugged')
Plug 'kien/ctrlp.vim'
Plug 'fatih/vim-go', {'for': 'go'}
Plug 'bling/vim-airline'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-surround'
Plug 'scrooloose/nerdcommenter'
Plug 'scrooloose/syntastic'
Plug 'altercation/vim-colors-solarized'
Plug 'klen/python-mode', {'for': 'python'}
Plug 'majutsushi/tagbar'
Plug 'fatih/molokai'
Plug 'terryma/vim-multiple-cursors'
Plug 'jmcantrell/vim-virtualenv', {'for': 'python'}
Plug 'scrooloose/nerdtree'
Plug 'Shougo/neocomplete.vim'
Plug 'godlygeek/tabular'
Plug 'plasticboy/vim-markdown'
Plug 'SirVer/ultisnips'
Plug 'cespare/vim-toml', {'for' : 'toml'}
Plug 'elzr/vim-json', {'for' : 'json'}
Plug 'rking/ag.vim'
Plug 'morhetz/gruvbox'
Plug 'honza/vim-snippets'

call plug#end()

filetype plugin indent on
syntax enable
set t_Co=256
set background=dark
colorscheme gruvbox
set encoding=utf-8
set fillchars+=stl:\ ,stlnc:\
set term=xterm-256color
set termencoding=utf-8


set modelines=3
set number
set ts=4
set sw=4

set background=dark
set nobackup
" set listchars=tab:>-,trail:Â·,nbsp:%
set showbreak=>
set history=50
set ruler
" set noshowcmd
set incsearch
set wildmenu
set wildmode=longest,list,full
set undofile
set undodir=/tmp
set directory=/tmp

let g:go_fmt_autosave = 1
let g:go_disable_autoinstall = 1

autocmd BufReadPost *
			\ if line("'\"") > 0 && line("'\"") <= line("$") |
			\   exe "normal g`\"" |
			\ endif
au BufNewFile,BufRead *.conf setf toml

au FileType go nmap gr <Plug>(go-run)
au FileType go nmap gb <Plug>(go-build)
au FileType go nmap gt <Plug>(go-test)
au FileType go nmap gi <Plug>(go-info)
au FileType go nmap gn <Plug>(go-doc-browser)
au FileType go nmap gh <Plug>(go-doc)
au FileType go nmap gv <Plug>(go-doc-vertical)
au FileType go nmap gd <Plug>(go-def)
au FileType go nmap gds <Plug>(go-def-split)

" disable preview window for autocomplete
set completeopt-=preview

" NeoComplete options
let g:neocomplete#enable_at_startup = 0
let g:neocomplete#sources#syntax#min_keyword_length = 3
let g:neocomplete#manual_completion_start_length = 3
let g:neocomplete#auto_completion_start_length = 3
call neocomplete#custom#source('ultisnips', 'min_pattern_length', 3)

" make braket matching highlight more comfortable
hi MatchParen cterm=bold ctermbg=none ctermfg=magenta

let g:go_highlight_functions = 0
let g:go_highlight_methods = 0
let g:go_highlight_structs = 0

let g:tagbar_type_go = {  
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
	\ }

nmap <F8> :TagbarToggle<CR>

set laststatus=2

nmap <Leader>t :NERDTree<CR>
nmap <Leader>c :close<CR>
nmap <Leader>i :GoImports<CR>

if !exists("g:go_golint_bin")
    let g:go_golint_bin = "golint"
endif

set timeoutlen=1000 ttimeoutlen=0
nmap <Leader>w :set wrap!<cr>

noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

" UltiSnips settings
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

" Pymode settings
let g:pymode_folding = 0
let g:pymode_rope_autoimport_import_after_complete = 1
let g:pymode_syntax_all = 1

" Tagbar settings
autocmd FileType python,go nested :TagbarOpen
let g:tagbar_compact = 1
