let g:python_host_prog = '/usr/local/bin/python'

call plug#begin('~/.vim/plugged')

Plug 'Raimondi/delimitMate'
Plug 'Shougo/neosnippet.vim'
Plug 'Shougo/neosnippet-snippets'
"Plug 'bling/vim-airline'
Plug 'cespare/vim-toml', {'for' : 'toml'}
Plug 'ctrlpvim/ctrlp.vim'
Plug 'elzr/vim-json', {'for' : 'json'}
Plug 'fatih/vim-go', {'for': 'go'}
"Plug 'godlygeek/tabular'
"Plug 'plasticboy/vim-markdown'
"Plug 'honza/vim-snippets'
Plug 'jmcantrell/vim-virtualenv', {'for': 'python'}
"Plug 'klen/python-mode', {'for': 'python'}
Plug 'majutsushi/tagbar'
" colorshemes
Plug 'morhetz/gruvbox'
"Plug 'blueshirts/darcula'
"Plug 'fatih/molokai'

Plug 'rking/ag.vim'
Plug 'scrooloose/nerdcommenter'
"Plug 'terryma/vim-multiple-cursors'
Plug 'tpope/vim-fugitive'
"Plug 'tpope/vim-surround'
"Plug 'tpope/vim-unimpaired'
Plug 'Shougo/echodoc.vim'
"Plug 'chase/vim-ansible-yaml'
Plug 'Shougo/vimproc'
Plug 'davidhalter/jedi-vim'
Plug 'itchyny/lightline.vim'

if has('nvim')
  Plug 'Shougo/deoplete.nvim'
  Plug 'zchee/deoplete-go', { 'do': 'make'}
  Plug 'zchee/deoplete-jedi', {'for': 'python'}
else
  Plug 'Shougo/neocomplete.vim'
endif

call plug#end()

if !has('nvim')
  set nocompatible
  filetype off
  filetype plugin indent on

  set ttyfast
  set ttymouse=xterm2
  set ttyscroll=3

  set laststatus=2
  set encoding=utf-8              " Set default encoding to UTF-8
  set autoread                    " Automatically reread changed files without asking me anything
  set autoindent                  
  set backspace=indent,eol,start  " Makes backspace key more powerful.
  set incsearch                   " Shows the match while typing
  set hlsearch                    " Highlight found searches
endif

set visualbell t_vb=
set noerrorbells             " No beeps
set number                   " Show line numbers
set showcmd                  " Show me what I'm typing
set showmode                 " Show current mode.
set noswapfile               " Don't use swapfile
set nobackup                 " Don't create annoying backup files
set splitright               " Split vertical windows right to the current windows
set splitbelow               " Split horizontal windows below to the current windows
set autowrite                " Automatically save before :next, :make etc.
set hidden
set fileformats=unix,dos,mac " Prefer Unix over Windows over OS 9 formats
set noshowmatch              " Do not show matching brackets by flickering
set noshowmode               " We show the mode with airline or lightline
set ignorecase               " Search case insensitive...
set smartcase                " ... but not it begins with upper case 
set nocursorcolumn           " speed up syntax highlighting
set nocursorline
set relativenumber

set lazyredraw          " Wait to redraw
syntax sync minlines=256
set synmaxcol=300
set re=1

"set encoding=utf-8
"set fillchars+=stl:\ ,stlnc:\
"set termencoding=utf-8
"set foldmethod=syntax
"set foldlevelstart=99

"set modelines=3
"set cursorline

set history=50
"set ruler
"set wildmenu
"set wildmode=longest,list,full
set undofile
set undodir=/tmp
set directory=/tmp

set fileformats=unix,dos,mac    " Prefer Unix over Windows over OS 9 formats
" Change cursor shape between insert and normal mode in iTerm2.app
"if $TERM_PROGRAM =~ "iTerm"
	"let &t_SI = "\<Esc>]50;CursorShape=1\x7" " Vertical bar in insert mode
	"let &t_EI = "\<Esc>]50;CursorShape=0\x7" " Block in normal mode
"endif

"http://stackoverflow.com/questions/20186975/vim-mac-how-to-copy-to-clipboard-without-pbcopy
set clipboard^=unnamed
set clipboard^=unnamedplus

if has("gui_macvim")
	let macvim_skip_colorscheme=1
  set background=dark
  colorscheme gruvbox
  "highlight SignColumn guibg=#272822
else
  if has('!nvim')
    syntax enable
    set t_Co=256
  endif

  set background=dark
  colorscheme gruvbox
endif

autocmd BufNewFile,BufRead *.go setlocal noet ts=4 sw=4 sts=4
au BufNewFile,BufRead *.vim setlocal noet ts=2 sw=2 sts=2
au BufNewFile,BufRead *.txt setlocal noet ts=4 sw=4
au BufNewFile,BufRead *.md setlocal noet ts=4 sw=4

let mapleader = ","
let maplocalleader = "-"


"""""""""""""""""""""
"  Vim-go settings  "
"""""""""""""""""""""
autocmd BufReadPost *
			\ if line("'\"") > 0 && line("'\"") <= line("$") |
			\   exe "normal g`\"" |
			\ endif
au BufNewFile,BufRead *.conf setf toml

au FileType go nmap gr <Plug>(go-run)
au FileType go nmap gb <Plug>(go-build)
"au FileType go nmap gt <Plug>(go-test)
au FileType go nmap gi <Plug>(go-info)
au FileType go nmap gn <Plug>(go-doc-browser)
au FileType go nmap gh <Plug>(go-doc)
au FileType go nmap gv <Plug>(go-doc-vertical)
au FileType go nmap gdd <Plug>(go-def)
au FileType go nmap gds <Plug>(go-def-split)
au FileType go nmap gdv <Plug>(go-def-vertical)
nmap <Leader>i :GoImports<CR>

if !exists("g:go_golint_bin")
    let g:go_golint_bin = "golint"
endif

let g:go_fmt_autosave = 1
let g:go_fmt_fail_silently = 0
let g:go_fmt_command = "goimports"
let g:go_autodetect_gopath = 1
let g:go_term_enabled = 1
let g:go_snippet_engine = "neosnippet"
let g:go_highlight_space_tab_error = 0
let g:go_highlight_array_whitespace_error = 0
let g:go_highlight_trailing_whitespace_error = 0
let g:go_highlight_extra_types = 0
let g:go_highlight_operators = 0
let g:go_highlight_build_constraints = 1
let g:go_bin_path = "/Users/a_menkov/go/bin"

let g:tagbar_type_go = {
    \ 'ctagstype' : 'go',
    \ 'kinds'     : [
        \ 'p:package',
        \ 'i:imports:1',
        \ 'c:constants',
        \ 'v:variables',
        \ 't:types',
        \ 'n:interfaces',
        \ 'w:fields',
        \ 'e:embedded',
        \ 'm:methods',
        \ 'r:constructor',
        \ 'f:functions'
    \ ],
    \ 'sro' : '.',
    \ 'kind2scope' : {
        \ 't' : 'ctype',
        \ 'n' : 'ntype'
    \ },
    \ 'scope2kind' : {
        \ 'ctype' : 't',
        \ 'ntype' : 'n'
    \ },
    \ 'ctagsbin'  : 'gotags',
    \ 'ctagsargs' : '-sort -silent'
	\ }

" ==================== delimitMate ====================
let g:delimitMate_expand_cr = 1		
let g:delimitMate_expand_space = 1		
let g:delimitMate_smart_quotes = 1		
let g:delimitMate_expand_inside_quotes = 0		
let g:delimitMate_smart_matchpairs = '^\%(\w\|\$\)'		

"""""""""""""""""""""""
"  Neocomplete settings  "
"""""""""""""""""""""""
set completeopt=menu,noinsert

"autocmd FileType python setlocal omnifunc=jedi#completions

" SuperTab like snippets behavior.
"imap <expr><TAB>
" \ pumvisible() ? "\<C-n>" :
" \ neosnippet#expandable_or_jumpable() ?
" \    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
"smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
"\ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" make braket matching highlight more comfortable
"hi MatchParen cterm=bold ctermbg=none ctermfg=magenta

set laststatus=2

nmap <Leader>t :NERDTree<CR>

nmap <Leader>w :w<cr>

noremap <Up> <NOP>
noremap <Down> <NOP>
noremap <Left> <NOP>
noremap <Right> <NOP>

"""""""""""""""""""""
"  Tagbar settings  "
"""""""""""""""""""""
nmap <F8> :TagbarToggle<CR>
let g:tagbar_compact = 1
let g:tagbar_autoclose = 1
let g:tagbar_autofocus = 1

""""""""""""""""""""""
"  Airline settings  "
""""""""""""""""""""""
let g:airline_theme="gruvbox"
if !exists('g:airline_symbols')
	let g:airline_symbols = {}
endif
let g:airline_symbols.linenr = '␤ '
let g:airline_symbols.paste = 'ρ'
let g:airline_left_sep = '»'
let g:airline_right_sep = '«'
let g:airline#extensions#syntastic#enabled = 0

" Press space to clear search highlighting
nnoremap <silent> <Space> :noh<CR>
nnoremap <NL> i<CR><ESC>

""""""""""""""""""""""
"  EchoDoc settings  "
""""""""""""""""""""""
set noshowcmd
let g:echodoc_enable_at_startup = 1

""""""""""""""""
"  Navigation  "
""""""""""""""""
noremap <C-h> <C-w>h
noremap <C-j> <C-w>j
noremap <C-k> <C-w>k
noremap <C-l> <C-w>l

"""""""""""""""""""""""""""""""""
"  Quickfix and Location lists  "
"""""""""""""""""""""""""""""""""

" Close window
nnoremap <silent> <leader>ll :ccl<CR>:lcl<CR>

" Location fast navigation
nnoremap <silent> <leader>nn :lwindow<CR>:lne<CR>
nnoremap <silent> <leader>pp :lwindow<CR>:lp<CR>

" Quickfix fast navigation
nnoremap <silent> <localleader>nn :cwindow<CR>:cn<CR>
nnoremap <silent> <localleader>pp :cwindow<CR>:cp<CR>

if has('nvim')
	nmap <BS> <C-W>h
  let $NVIM_TUI_ENABLE_CURSOR_SHAPE=1
endif

"""""""""""""""""""""
"  Pymode settings  "
"""""""""""""""""""""

let g:pymode_folding = 0
let g:pymode_syntax_all = 0
let g:pymode_rope_goto_definition_bind = 'gd'
let g:pymode_rope_goto_definition_cmd = 'e'
let g:pymode_rope_organize_imports_bind = 'goi'
let g:pymode_rope_completion = 0
let g:pymode_completion_provider = 'jedi'
let g:pymode_lint_on_write = 0
let g:pymode_lint_checkers = ['pyflakes', 'pep8', 'pylint', 'pep257']
let g:pymode_lint_ignore = 'C0111'
let g:pymode_lint_sort = ['E', 'C', 'W', 'R', 'I', 'F', 'D']
let g:pymode_options_max_line_length = 99

" ==================== completion and snippet =========================
set pumheight=10 
" I use deoplete for Neovim and neocomplete for Vim.
if has('nvim')
  let g:deoplete#enable_at_startup = 1
  let g:deoplete#ignore_sources = {}
  "let g:deoplete#ignore_sources._ = ['buffer', 'member', 'tag', 'file', 'neosnippet']
  let g:deoplete#ignore_sources._ = ['buffer', 'member', 'tag', 'file', 'neosnippet']
  let g:deoplete#sources#go#sort_class = ['func', 'type', 'var', 'const']

  " Use partial fuzzy matches like YouCompleteMe
  "call deoplete#custom#set('_', 'matchers', ['matcher_full_fuzzy'])

  "autocmd FileType python setlocal omnifunc=jedi#completions
  "let g:jedi#completions_enabled = 0
  "let g:jedi#auto_vim_configuration = 0
  "let g:jedi#smart_auto_mappings = 0
  "let g:jedi#show_call_signatures = 0 
  "let g:echodoc_enable_at_startup = 1
else
  "let g:neocomplete#enable_at_startup = 1
  let g:neocomplete#enable_smart_case = 1
  let g:neocomplete#sources#syntax#min_keyword_length = 3
  "let g:neocomplete#manual_completion_start_length = 3
  "let g:neocomplete#auto_completion_start_length = 3

  if !exists('g:neocomplete#sources')
    let g:neocomplete#sources = {}
  endif
  let g:neocomplete#sources._ = ['buffer', 'member', 'tag', 'file', 'dictionary']
  let g:neocomplete#sources.go = ['omni']

  " Python completion settings
	autocmd FileType python setlocal omnifunc=jedi#completions
	let g:jedi#completions_enabled = 0
	let g:jedi#auto_vim_configuration = 0
	let g:jedi#smart_auto_mappings = 0
  if !exists('g:neocomplete#force_omni_input_patterns')
    let g:neocomplete#force_omni_input_patterns = {}
  endif
	let g:neocomplete#force_omni_input_patterns.python = '\h\w*\|[^. \t]\.\w*'
	"\ '\%([^. \t]\.\|^\s*@\|^\s*from\s.\+import \|^\s*from \|^\s*import \)\w*'
	" alternative pattern: '\h\w*\|[^. \t]\.\w*'

  if !exists('g:neocomplete#force_omni_input_patterns')
    let g:neocomplete#force_omni_input_patterns = {}
  endif
  let g:neocomplete#force_omni_input_patterns.go = '\h\w*\|[^.[:digit:] *\t]\.\w*'
  let g:neocomplete#force_omni_input_patterns.python = '\h\w*\|[^. \t]\.\w*'

  if !exists('g:neocomplete#sources')
    let g:neocomplete#sources = {}
  endif
  let g:neocomplete#sources._ = ['buffer', 'member', 'tag', 'file', 'dictionary']
  let g:neocomplete#sources.go = ['omni']
  let g:neocomplete#sources.python = ['omni']

  "" disable sorting
  call neocomplete#custom#source('_', 'sorters', [])
endif

" I want to use my tab more smarter. If we are inside a completion menu jump
" to the next item. Otherwise check if there is any snippet to expand, if yes
" expand it. Also if inside a snippet and we need to jump tab jumps. If none
" of the above matches we just call our usual 'tab'.
function! s:tab_complete()
  if pumvisible()
    return "\<c-n>"
  endif

  if neosnippet#expandable_or_jumpable() 
    return "\<Plug>(neosnippet_expand_or_jump)"
  endif

  return "\<tab>"
endfunction
imap <silent><expr><TAB> <SID>tab_complete()

smap <expr><tab> neosnippet#expandable_or_jumpable() ? 
      \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

inoremap <silent><expr><s-tab> pumvisible() ? "\<c-p>" : "\<s-tab>"
imap <silent><expr> <CR> pumvisible() ? "\<C-y>" : '<Plug>delimitMateCR'

autocmd InsertLeave * NeoSnippetClearMarkers

" Use neocomplete.
"let g:neocomplete#enable_at_startup = 1
" Use smartcase.
"let g:neocomplete#enable_smart_case = 0
"let g:neocomplete#enable_ignore_case = 0
" Set minimum syntax keyword length.
"let g:neocomplete#sources#syntax#min_keyword_length = 3
" <TAB>: completion.
"inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"
"inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
"inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
" Close popup by <Space>.
"inoremap <expr><Space> pumvisible() ? "\<C-y>" : "\<Space>"
"inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
"function! s:my_cr_function()
  "return pumvisible() ? "\<C-y>" : "\<CR>"
"endfunction

" Plugin key-mappings.
"imap <C-k>     <Plug>(neosnippet_expand_or_jump)
"smap <C-k>     <Plug>(neosnippet_expand_or_jump)
"xmap <C-k>     <Plug>(neosnippet_expand_target)

 " vim:ts=2:sw=2:et
